# A list of sample problems and the relational SQL queries I would use to solve them.

#1. How many orders were placed in January?
SELECT count(orderID)
FROM BIT_DB.JanSales;

#2. How many of those orders were for an iPhone?
SELECT count(orderID)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone';

#3. Select the customer account numbers for all the orders that were placed in February.
SELECT acctnum
FROM BIT_DB.customers
INNER JOIN BIT_DB.FebSales ON customers.order_id = FebSales.orderID;

#4. Which product was the cheapest one sold in January, and what was the price?
SELECT Product, price
FROM BIT_DB.JanSales
ORDER BY price asc LIMIT 1;

#5. What is the total revenue for each product sold in January?
SELECT Product, sum(Quantity)*price AS Revenue
FROM BIT_DB.JanSales
GROUP BY Product;

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT Product, sum(Quantity), sum(Quantity)*price AS Revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

#7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT count(customers.acctnum), avg(FebSales.Quantity)*FebSales.price
FROM BIT_DB.customers
JOIN BIT_DB.FebSales ON FebSales.orderID = customers.order_id
WHERE FebSales.Quantity>2;

#8. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, sum(Quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;

#9. How many locations are there in New York that sold more than 1 product in January?
SELECT count(distinct location)
FROM BIT_DB.JanSales
WHERE location like '%NY%'
AND Quantity >1;

#10. How many of each type of headphone were sold in February?
SELECT Product, sum(Quantity)
FROM BIT_DB.FebSales
WHERE Product like '%headphone%'
GROUP BY Product;

#11. What was the average amount spent per account in February?
SELECT avg(FebSales.quantity*FebSales.price)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers ON customers.order_id = FebSales.orderID;

#12. What was the average quantity of products purchased per account in February?
SELECT sum(FebSales.Quantity)/count(customers.acctnum)
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers ON customers.order_id = FebSales.orderID;

#13. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT Product, sum(Quantity*price) as total
FROM BIT_DB.JanSales
GROUP BY Product
ORDER BY total desc LIMIT 1;

# The remaining problems and solutions are from a different sample database, hence the variation in table and column names.

#14. Show Customers (full names, customer ID, and country) who are not in the US.
SELECT FirstName, LastName, CustomerId, Country
FROM customers
WHERE Country != 'USA';

#15. Show only the Customers from Brazil.
SELECT *
FROM customers
WHERE Country = 'Brazil';

#16. Find the Invoices of customers who are from Brazil (full name, Invoice ID, Date of the invoice, and billing country).
SELECT customers.FirstName, customers.LastName, invoices.InvoiceId, invoices.InvoiceDate, invoices.BillingCountry
FROM invoices
LEFT JOIN customers ON customers.CustomerId=invoices.CustomerId
WHERE invoices.BillingCountry = 'Brazil';

#17. Show the Employees who are Sales Agents.
SELECT *
FROM employees
WHERE Title LIKE '%Sales%Agent%';

#18. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM invoices;

#19. Provide a query that shows the invoices associated with each sales agent.
SELECT DISTINCT employees.FirstName, employees.LastName, invoices.InvoiceId
FROM invoices
JOIN customers ON customers.CustomerId=invoices.CustomerId
JOIN employees ON employees.EmployeeId=customers.SupportRepId
WHERE employees.Title LIKE '%Sales%Agent%';

#20. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT DISTINCT inv.Total, cus.FirstName, cus.LastName, cus.Country, emp.FirstName, emp.LastName
FROM invoices inv
JOIN customers cus ON cus.CustomerId=inv.CustomerId
JOIN employees emp ON emp.EmployeeId=cus.SupportRepId
WHERE emp.Title LIKE '%Sales%Agent%';

#21. How many Invoices were there in 2009?
SELECT COUNT(*)
FROM invoices 
WHERE InvoiceDate LIKE '2009%';

#22. What are the total sales for 2009?
SELECT SUM(Total)
FROM invoices 
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#23. Write a query that includes the purchased track name with each invoice line item.
SELECT invoice_items.InvoiceLineId, tracks.Name
FROM invoice_items
JOIN tracks ON invoice_items.TrackId=tracks.TrackId;

#24. Write a query that includes the purchased track name AND artist name with each invoice line item.
SELECT invoice_items.InvoiceLineId, tracks.Name AS Track, artists.Name AS Artist
FROM invoice_items
JOIN tracks ON invoice_items.TrackId=tracks.TrackId
JOIN albums ON tracks.AlbumId=albums.AlbumId
JOIN artists ON albums.ArtistId=artists.ArtistId;

#25. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT tracks.name AS Track, albums.Title AS Album, media_types.Name AS MediaType, genres.Name AS Genre
FROM tracks
JOIN albums ON tracks.AlbumId=albums.AlbumId
JOIN media_types ON tracks.MediaTypeId=media_types.MediaTypeId
JOIN genres ON tracks.GenreId=genres.GenreId;

#26. Show the total sales made by each sales agent.
SELECT DISTINCT ROUND(SUM(inv.Total), 2) AS TotalSales, emp.FirstName, emp.LastName
FROM invoices inv
JOIN customers cus ON cus.CustomerId=inv.CustomerId
JOIN employees emp ON emp.EmployeeId=cus.SupportRepId
GROUP BY emp.LastName;

#27. Which sales agent made the most in sales in 2009?
SELECT DISTINCT ROUND(SUM(inv.Total), 2) AS TotalSales, emp.FirstName, emp.LastName
FROM invoices inv
JOIN customers cus ON cus.CustomerId=inv.CustomerId
JOIN employees emp ON emp.EmployeeId=cus.SupportRepId
WHERE inv.InvoiceDate LIKE '2009%'
GROUP BY emp.LastName
ORDER BY TotalSales desc LIMIT 1;
